// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EckaSavings {
    address payable public owner;
    uint public minDeposit;
    uint public minWithdrawal;
    uint public interestRate;
    uint public lastDeposit;

    event Deposited(address indexed from, uint amount);
    event Withdrawn(address indexed to, uint amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    constructor(uint _minDeposit, uint _minWithdrawal, uint _interestRate) {
        owner = payable(msg.sender);
        minDeposit = _minDeposit;
        minWithdrawal = _minWithdrawal;
        interestRate = _interestRate;
        lastDeposit = block.timestamp;
    }

    function deposit() public payable {
        require(msg.value >= minDeposit, "Low deposit");
        lastDeposit = block.timestamp;
        emit Deposited(msg.sender, msg.value);
    }

    function withdraw() public onlyOwner {
        uint contractBalance = address(this).balance;
        require(contractBalance >= minWithdrawal, "Low balance");
        uint interest = calcInterest(contractBalance);
        uint total = contractBalance + interest;
        owner.transfer(total);
        emit Withdrawn(owner, total);
    }

    function calcInterest(uint principal) internal view returns (uint) {
        uint elapsed = block.timestamp - lastDeposit;
        return (principal * interestRate * elapsed) / (365 days * 100);
    }

    function balance() public view returns (uint) {
        uint contractBalance = address(this).balance;
        uint interest = calcInterest(contractBalance);
        return contractBalance + interest;
    }

    receive() external payable {
        deposit();
    }

    fallback() external payable {
        deposit();
    }
}
