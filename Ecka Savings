// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EckaSavings {
    address payable public owner;
    uint public minDeposit;
    uint public minWithdrawal;

    event Deposited(address indexed from, uint amount);
    event Withdrawn(address indexed to, uint amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    constructor(uint _minDeposit, uint _minWithdrawal) {
        owner = payable(msg.sender);
        minDeposit = _minDeposit;
        minWithdrawal = _minWithdrawal;
    }

    function deposit() public payable {
        require(msg.value >= minDeposit, "Low deposit");
        emit Deposited(msg.sender, msg.value);
    }

    function withdraw() public onlyOwner {
        uint contractBalance = address(this).balance;
        require(contractBalance >= minWithdrawal, "Low balance");
        owner.transfer(contractBalance);
        emit Withdrawn(owner, contractBalance);
    }

    function balance() public view returns (uint) {
        return address(this).balance;
    }

    receive() external payable {
        deposit();
    }

    fallback() external payable {
        deposit();
    }
}
